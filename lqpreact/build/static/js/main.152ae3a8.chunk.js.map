{"version":3,"sources":["page/home/css/home.css","store/reducer/study.js","store/container/index.js","store/reducer/index.js","store/index.js","store/action/study.js","page/home/home.jsx","router/index.js","serviceWorker.js","index.js"],"names":["module","exports","getStudyList","state","action","type","payload","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","logger","handerStudyList","res","dispatch","fetch","headers","then","res3","clone","json","res2","Home","studyList","this","className","style","body","classname","nav","padd","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","role","aria-haspopup","aria-labelledby","tabIndex","aria-disabled","placeholder","container","lqpbg","lqp","bg","map","item","item2","JSON","parse","POST","list_box","width","src","thumbUrl","alt","card_title","value","props","forEach","console","log","setState","Component","connect","browserHistory","createBrowserHistory","router","history","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.152ae3a8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"padd\":\"home__padd--2JNMD\",\"clearfix\":\"home__clearfix--2HxeZ\",\"lqp\":\"home__lqp--2dMAV\",\"lqpbg\":\"home__lqpbg--29zVq\",\"container\":\"home__container--uLPpL\",\"list_box\":\"home__list_box--27clH\",\"bg\":\"home__bg--27HJu\",\"card_title\":\"home__card_title--25bQu\",\"body\":\"home__body--3Dkgk\"};","import { GET_STUDY_LIST } from './../container/index'\r\n\r\n\r\nconst getStudyList = (state=[],action={}) =>{\r\n    switch (action.type) {\r\n        case GET_STUDY_LIST:{\r\n            state=action.payload;\r\n            return state;\r\n        }\r\n        default:return state;\r\n    }\r\n};\r\n\r\nexport default getStudyList;\r\n","export const GET_STUDY_LIST = \"GET_STUDY_LIST\";\r\n","import { combineReducers } from 'redux'\r\nimport getStudyList from './../reducer/study'\r\n\r\nconst rootReducer = combineReducers({\r\n    getStudyList\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore,applyMiddleware } from 'redux'\r\nimport rootReducer from './reducer/index'\r\nimport logger from 'redux-logger'\r\nimport thunk from 'redux-thunk'\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(thunk,logger)\r\n);\r\n\r\nexport default store;\r\n\r\n","import { GET_STUDY_LIST } from './../container/index'\r\n\r\nconst getStudyList = ()=>{\r\n    return (dispatch)=>{\r\n       return  fetch('http://localhost:5000/api/study/getStudyList',\r\n            {\r\n            headers:{\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res=>{\r\n            let res3 = res.clone();\r\n            res.json().then(res2=>{\r\n\r\n                dispatch(handerStudyList(res2));\r\n            });\r\n           return res3;\r\n       })\r\n    }\r\n\r\n};\r\n\r\nconst handerStudyList =(res)=>{\r\n    return{\r\n        type: GET_STUDY_LIST ,\r\n        payload:res\r\n    }\r\n};\r\n\r\nexport default getStudyList;\r\n","import React, {Component} from 'react';\r\nimport classname from 'classnames'\r\nimport style from './css/home.css'\r\nimport { connect } from 'react-redux'\r\nimport getStudyList from './../../store/action/study'\r\n// function getBase64(file) {\r\n//     return new Promise((resolve, reject) => {\r\n//         const reader = new FileReader();\r\n//         reader.readAsDataURL(file);\r\n//         reader.onload = () => resolve(reader.result);\r\n//         reader.onerror = error => reject(error);\r\n//     });\r\n// }\r\n\r\nclass Home extends Component {\r\n    state={\r\n        studyList : []\r\n    };\r\n\r\n    render() {\r\n        const { studyList } = this.state;\r\n\r\n        return (\r\n            <div className={style.body}>\r\n                <div className={classname(style.nav,style.padd,\"bg-light\")}>\r\n                    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                        <a className=\"navbar-brand\" href=\"#\">LQP</a>\r\n                        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\r\n                                data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\r\n                                aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                            <span className=\"navbar-toggler-icon\" />\r\n                        </button>\r\n                        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                            <ul className=\"navbar-nav mr-auto\">\r\n                                <li className=\"nav-item active\">\r\n                                    <a className=\"nav-link\" href=\"#\">首页 <span className=\"sr-only\">(current)</span></a>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <a className=\"nav-link\" href=\"#\">学习</a>\r\n                                </li>\r\n                                <li className=\"nav-item dropdown\">\r\n                                    <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\"\r\n                                       data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                        Dropdown\r\n                                    </a>\r\n                                    <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                                        <a className=\"dropdown-item\" href=\"#\">Action</a>\r\n                                        <a className=\"dropdown-item\" href=\"#\">Another action</a>\r\n                                        <div className=\"dropdown-divider\" />\r\n                                        <a className=\"dropdown-item\" href=\"#\">Something else here</a>\r\n                                    </div>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <a className=\"nav-link disabled\" href=\"#\" tabIndex=\"-1\"\r\n                                       aria-disabled=\"true\">Disabled</a>\r\n                                </li>\r\n                            </ul>\r\n                            <form className=\"form-inline my-2 my-lg-0\">\r\n                                <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                                    <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n                            </form>\r\n                        </div>\r\n                    </nav>\r\n                </div>\r\n\r\n                <div className={classname(style.container,style.lqpbg)}>\r\n                    <div className={classname(style.lqp)}>\r\n                        李清平的人个网站\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={ classname(style.container,style.bg,\"list\") }>\r\n                  {  studyList.map((item)=>{\r\n                      let item2 = JSON.parse(item.POST);\r\n                      return(\r\n                        <div className={style.list_box}>\r\n                            <div className=\"card\" style={{width: \"12rem\"}}>\r\n                                <img src={ item2.thumbUrl } className=\"card-img-top\" alt=\"...\" />\r\n                                <div className=\"card-body\">\r\n                                    <h4 className={ classname(style.card_title,\"card-title\") }>{ item2.value }</h4>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount() {\r\n        this.props.getStudyList().then(studyList=>{\r\n            studyList.json().then(\r\n                res2=>{\r\n                    res2.forEach(item=>{\r\n                        console.log(JSON.parse(item.POST).thumbUrl);\r\n                    })\r\n                    this.setState({\r\n                        studyList:res2\r\n                    })\r\n                }\r\n            )\r\n        });\r\n    }\r\n}\r\n\r\nconst mapStateToProps =(state)=>{\r\n    console.log(state);\r\n    return{\r\n        studyList: state.getStudyList\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps,{ getStudyList })(Home);\r\n","import React from 'react';\r\nimport { Route,Router,Switch } from 'react-router-dom'\r\nimport Home from './../page/home/home'\r\nimport { createBrowserHistory } from 'history';\r\n\r\nconst browserHistory = createBrowserHistory();\r\n\r\nconst router =() => (\r\n        <Router history={ browserHistory }>\r\n            <Switch>\r\n                <Route path='/' component={ Home } />\r\n            </Switch>\r\n        </Router>\r\n);\r\n\r\nexport default router;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport store from './store/index';\nimport { Provider } from 'react-redux';\nimport Router from './router/index';\nimport './index.sass';\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/css/bootstrap-grid.min.css';\nimport 'bootstrap/dist/css/bootstrap-reboot.min.css';\nimport 'bootstrap/dist/js/bootstrap';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={ store }>\n        <React.StrictMode>\n            <Router />\n        </React.StrictMode>\n    </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}